#!/bin/sh
# Helper script invoked by `make nginx-config` to generate an Nginx stream (TCP) config.
# It uses environment variables passed from Makefile.
set -eu

# Required
if [ -z "${DOMAIN:-}" ]; then
  echo "ERROR: DOMAIN is required. Example: make nginx-config DOMAIN=queue.example.com" >&2
  exit 1
fi

# Resolve certificate paths (LetsEncrypt by default)
fullchain="${CERT_FULLCHAIN:-}"
privkey="${CERT_KEY:-}"
if [ -z "$fullchain" ] || [ -z "$privkey" ]; then
  cert_dir="${CERT_DIR:-/etc/letsencrypt/live/${DOMAIN}}"
  fullchain="${fullchain:-${cert_dir}/fullchain.pem}"
  privkey="${privkey:-${cert_dir}/privkey.pem}"
fi

# Defaults
LISTEN_PORT="${LISTEN_PORT:-5671}"
BACKEND_HOST="${BACKEND_HOST:-127.0.0.1}"
BACKEND_PORT="${BACKEND_PORT:-5672}"
NGINX_CONFIG_NAME="${NGINX_CONFIG_NAME:-nginx-rabbitmq-${DOMAIN}.conf}"
NGINX_TEST="${NGINX_TEST:-nginx -t}"
NGINX_RELOAD="${NGINX_RELOAD:-nginx -s reload}"

# Directory strategy:
# - If NGINX_STREAM_DIR is set: write there (legacy single-dir mode), no symlink.
# - Else: prefer sites-available + sites-enabled (create/refresh symlink).
available_dir=""
enabled_dir=""
single_dir_mode="false"

if [ -n "${NGINX_STREAM_DIR:-}" ]; then
  # Explicit single-dir mode
  if [ ! -d "${NGINX_STREAM_DIR}" ]; then
    echo "ERROR: NGINX_STREAM_DIR='${NGINX_STREAM_DIR}' does not exist." >&2
    exit 1
  fi
  available_dir="${NGINX_STREAM_DIR}"
  enabled_dir=""
  single_dir_mode="true"
else
  # Prefer explicit env overrides if provided
  if [ -n "${NGINX_AVAILABLE_DIR:-}" ]; then available_dir="${NGINX_AVAILABLE_DIR}"; fi
  if [ -n "${NGINX_ENABLED_DIR:-}" ]; then enabled_dir="${NGINX_ENABLED_DIR}"; fi

  # Autodetect if not given
  if [ -z "$available_dir" ] && [ -d /etc/nginx/sites-available ]; then
    available_dir="/etc/nginx/sites-available"
  fi
  if [ -z "$enabled_dir" ] && [ -d /etc/nginx/sites-enabled ]; then
    enabled_dir="/etc/nginx/sites-enabled"
  fi

  # If either side is missing, fall back to first existing stream dir (single-dir mode)
  if [ -z "$available_dir" ] || [ -z "$enabled_dir" ]; then
    for d in /etc/nginx/streams-enabled /etc/nginx/stream.d /etc/nginx/conf.d /etc/nginx/sites-enabled; do
      if [ -d "$d" ]; then available_dir="$d"; enabled_dir=""; single_dir_mode="true"; break; fi
    done
  fi

  if [ -z "$available_dir" ]; then
    echo "ERROR: Could not detect an Nginx config directory." >&2
    echo "Provide NGINX_AVAILABLE_DIR/NGINX_ENABLED_DIR or NGINX_STREAM_DIR." >&2
    exit 1
  fi
fi

# Sanity: when in dual-dir mode, both must exist
if [ "$single_dir_mode" = "false" ]; then
  if [ ! -d "$available_dir" ] || [ ! -d "$enabled_dir" ]; then
    echo "ERROR: Expected directories don't exist:" >&2
    echo "  available_dir=$available_dir" >&2
    echo "  enabled_dir=$enabled_dir" >&2
    echo "Create them or use NGINX_STREAM_DIR=/etc/nginx/conf.d" >&2
    exit 1
  fi
fi

cfg_path="${available_dir}/${NGINX_CONFIG_NAME}"
echo "Generating Nginx stream config at: ${cfg_path}"

umask 022
cat >"${cfg_path}" <<EOF_CFG
# Auto-generated by Makefile (nginx-config)
# AMQPS (TLS) listener for ${DOMAIN} on port ${LISTEN_PORT},
# terminating TLS and forwarding to ${BACKEND_HOST}:${BACKEND_PORT}

upstream amqp_backend {
    server ${BACKEND_HOST}:${BACKEND_PORT};
}

server {
    listen 0.0.0.0:${LISTEN_PORT} ssl;
    ssl_certificate     ${fullchain};
    ssl_certificate_key ${privkey};

    # Harden TLS (adjust if legacy clients require older protocols/ciphers)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   HIGH:!aNULL:!MD5;

    # AMQP connections are long-lived
    proxy_connect_timeout 5s;
    proxy_timeout 3h;

    proxy_pass amqp_backend;
}
EOF_CFG

# Create/refresh symlink in sites-enabled if in dual-dir mode
if [ "$single_dir_mode" = "false" ]; then
  ln -sf "${cfg_path}" "${enabled_dir}/${NGINX_CONFIG_NAME}"
  echo "Symlinked ${enabled_dir}/${NGINX_CONFIG_NAME} -> ${cfg_path}"
fi

# Validate and reload Nginx
echo "Testing Nginx configuration..."
if ! sh -c "$NGINX_TEST"; then
  echo "ERROR: Nginx config test failed. Not reloading." >&2
  exit 1
fi

echo "Reloading Nginx..."
sh -c "$NGINX_RELOAD"

echo "Done. Clients can connect via amqps://USER:PASS@${DOMAIN}:${LISTEN_PORT}/VHOST"